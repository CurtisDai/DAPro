import tkinter as tk
class UI:
	def __init__(self,window,node_name):
		window.title('Mutual Exclusion Demo')

		self.node_name = node_name
		self.node_id = {self.node_name[0]:None,
						self.node_name[1]:None,
						self.node_name[2]:None,
		           		self.node_name[3]:None,
		           		self.node_name[4]:None,
		           		self.node_name[5]:None}
		self.node_position = {self.node_name[0]:(450,140),
						self.node_name[1]:(830,140),
						self.node_name[2]:(130,350),
		           		self.node_name[3]:(1150,350),
		           		self.node_name[4]:(450,560),
		           		self.node_name[5]:(830,560)}
		
		self.edge_id = {}
		self.radius = 100

		self.canvas = tk.Canvas(window, width=1280, height=800)
		self.canvas.pack()
		self.render_node()

	def add_edge(self, node0, node1, message):
		x0 = self.node_position[node0][0]
		y0 = self.node_position[node0][1]
		x1 = self.node_position[node1][0]
		y1 = self.node_position[node1][1]
		
		radius = self.radius
		if x0 != x1:
			delta = radius/(x1-x0)*(y1-y0)
			if x0 < x1:
				self.canvas.create_line(x0+radius, y0+delta+10, x1-radius, y1-delta+10,arrow=tk.LAST,fill='orangered') 
				# return self.canvas.create_text(x0+x1)>>1,(y0+y1+20)>>1, text=message, width=200,fill='orangered',anchor=tk.N)
				return self.canvas.create_text(x0+radius,y0+delta+10, text=message, width=200,fill='orangered',anchor=tk.NW)
			else:
				self.canvas.create_line(x0-radius, y0-delta-10, x1+radius, y1+delta-10,arrow=tk.LAST,fill='forestgreen') 
				# return self.canvas.create_text((x0+x1)>>1,(y0+y1-20)>>1, text=message, width=200,fill='forestgreen',anchor=tk.S)
				return self.canvas.create_text(x0-radius,y0-delta-10, text=message, width=200,fill='forestgreen',anchor=tk.SE)
		else:
			if y0 < y1:
				self.canvas.create_line(x0-10, y0+radius, x1-10, y1-radius,arrow=tk.LAST,fill='gold1') 
				# return self.canvas.create_text((x0+x1-20)>>1,(y0+y1+20)>>1, text=message, width=200,fill='gold1',anchor=tk.N)
				return self.canvas.create_text(x0-10,y0+radius, text=message, width=200,fill='gold1',anchor=tk.NW)
			else:
				self.canvas.create_line(x0+10, y0-radius, x1+10, y1+radius,arrow=tk.LAST,fill='cyan2') 
				# return self.canvas.create_text((x0+x1+20)>>1,(y0+y1-20)>>1, text=message, width=200,fill='cyan2',anchor=tk.S) 
				return self.canvas.create_text(x0+10,y0-radius, text=message, width=200,fill='cyan2',anchor=tk.SW) 

	def update_edge(self,first_node, second_node, target_message):
		self.canvas.insert(self.edge_id[first_node,second_node], tk.END, '\n'+target_message) 

	def render_node(self):
		radius = self.radius
		x0 = self.node_position[self.node_name[0]][0]
		y0 = self.node_position[self.node_name[0]][1]
		self.canvas.create_rectangle(x0-radius, y0-radius, x0+radius, y0+radius,fill='lightgoldenrod')  
		self.node_id[self.node_name[0]] = self.canvas.create_text(x0,y0, text='\nNode '+str(self.node_name[0]),font=("Purisa", 16), width=200)

		x1 = self.node_position[self.node_name[1]][0]
		y1 = self.node_position[self.node_name[1]][1]
		self.canvas.create_rectangle(x1-radius, y1-radius, x1+radius, y1+radius,fill='seashell')    
		self.node_id[self.node_name[1]] = self.canvas.create_text(x1,y1, text='\nNode '+str(self.node_name[1]),font=("Purisa", 16), width=200)


		x2 = self.node_position[self.node_name[2]][0]
		y2 = self.node_position[self.node_name[2]][1]
		self.canvas.create_rectangle(x2-radius, y2-radius, x2+radius, y2+radius,fill='skyblue1')   
		self.node_id[self.node_name[2]] = self.canvas.create_text(x2,y2, text='\nNode '+str(self.node_name[2]),font=("Purisa", 16), width=200)        

		x3 = self.node_position[self.node_name[3]][0]
		y3 = self.node_position[self.node_name[3]][1]
		self.canvas.create_rectangle(x3-radius, y3-radius, x3+radius, y3+radius,fill='pink3')  
		self.node_id[self.node_name[3]] = self.canvas.create_text(x3,y3, text='\nNode '+str(self.node_name[3]),font=("Purisa", 16), width=200)          

		x4 = self.node_position[self.node_name[4]][0]
		y4 = self.node_position[self.node_name[4]][1]
		self.canvas.create_rectangle(x4-radius, y4-radius, x4+radius, y4+radius,fill='thistle1')                 
		self.node_id[self.node_name[4]] = self.canvas.create_text(x4,y4, text='\nNode '+str(self.node_name[4]),font=("Purisa", 16), width=200)        

		x5 = self.node_position[self.node_name[5]][0]
		y5 = self.node_position[self.node_name[5]][1]
		self.canvas.create_rectangle(x5-radius, y5-radius, x5+radius, y5+radius,fill='palegreen')                                
		self.node_id[self.node_name[5]] = self.canvas.create_text(x5,y5, text='\nNode '+str(self.node_name[5]),font=("Purisa", 16), width=200)            

	def update_node(self, target_name, target_message):
		self.canvas.insert(self.node_id[target_name], tk.END, '\n'+target_message) 

window = tk.Tk()
node_name = ['0','1','2','3','4','5']
ui = UI(window, node_name)

keyboard_input = input('options:\n0.updateNode\n1.createEdge\n2.updateEdge\n')
operation_count = 0
while keyboard_input != 'q':
	prefix = '['+str(operation_count)+']:'

	if keyboard_input == '0':
		keyboard_input = input('Enter the node\'s name needs update\n')
		ui.update_node(keyboard_input,prefix+keyboard_input+' has been updated.')
	
	elif keyboard_input == '1':
		first_node = input('Enter first node\'s name of edge to create\n')
		second_node = input('Enter second node\'s name of edge to create\n')
		if first_node!=second_node and (first_node,second_node) not in ui.edge_id:
			ui.edge_id[first_node,second_node] = ui.add_edge(first_node,second_node,prefix+'new edge created')
		else:
			print('Plz enter valid node\'s name')
	elif keyboard_input == '2':
		first_node = input('Enter first node\'s name of edge to update\n')
		second_node = input('Enter second node\'s name of edge to update\n')
		if (first_node,second_node) in ui.edge_id:
			ui.update_edge(first_node,second_node,prefix+':existed edge updated')
		else:
			print('Plz create edge first.')

	operation_count += 1
	keyboard_input = input('options:\n0.updateNode\n1.createEdge\n2.updateEdge\n')

window.destroy()
